#!/bin/node

// script to update neovim plugins list in my README file for dotfiles repo

const fs = require("fs");
const os = require("os");

const HOME = os.homedir();
const readme_path = HOME + "/README.md";
const plugins_list_path = HOME + "/.config/nvim/lua/coffebar/plugins.lua";
const plugins = get_plugins(read_file_contents(plugins_list_path));

let titles = [];
(async function () {
  const requests = await Promise.all(
    plugins.map((plugin) => fetch("https://github.com/" + plugin)),
  );
  const responses = await Promise.all(requests.map((r) => r.text()));
  titles = responses.map((text) => {
    const regexp = new RegExp("<title>GitHub - (.+?)</", "g");
    const match = regexp.exec(text);
    if (match) {
      return match[1];
    } else {
      return "";
    }
  });

  replace_plugins_list_in_readme(plugins);
})();

function replace_plugins_list_in_readme() {
  const listHtml = render_html();
  let contents = read_file_contents(readme_path).toString();
  const markerStart = "<!-- plugins list start -->\n";
  const markerEnd = "<!-- plugins list end -->";
  const regexp = new RegExp(markerStart + "(.*?)" + markerEnd, "gms");
  const data = contents.replace(regexp, markerStart + listHtml + markerEnd);
  fs.writeFileSync(readme_path, data);
  console.log("Updated list of " + plugins.length + " plugins");
}

function read_file_contents(path) {
  try {
    return fs.readFileSync(path);
  } catch (err) {
    console.error(err);
    return "";
  }
}

function get_plugins(file_contents) {
  // get loaded plugins hosted on github
  const regexpUrls = new RegExp('"([^"/{}]+/[^"/{}]+)"', "g");
  const match = file_contents.toString().matchAll(regexpUrls);
  // remove duplicates and sort
  return Array.from(match, (m) => m[1])
    .filter((v, i, a) => a.indexOf(v) === i)
    .sort();
}

function render_html() {
  let html = "";
  plugins.forEach((plug, index) => {
    const text = titles[index] ? titles[index].replace(/^[^:]+:/g, "") : "";
    html =
      html + "- [" + plug + "](https://github.com/" + plug + ") " + text + "\n";
  });
  return html;
}
